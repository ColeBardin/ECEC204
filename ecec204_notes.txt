ECEC204 Notes Document
Cole Bardin
June 27th, 2022


Each Port Px where x is an integer, is a struct containing 5 uint8_t:

struct *Px {
	uint8_t DIR; /* Direction index of bits-> 1 for outputs for Px.index */
	uint8_t OUT; /* If dir is OUT, then it produces output */
	uint8_t IN;  /* If dir is IN, then there is an input number */
	uint8_t REN; /* Pull up/down, 1 for index makes Px.index active high, 0 for low */
	uint8_t SEL; /* */
};

PINS: Px.y where x.y is a float. x being the port and y being the index
Two build in LEDS:
LED1 -> red (P1.0)
LED2 -> r|g|b (P2.0 red, P2.1 green, P2.2 blue)

Switches:
S1 P1.1
S2 P1.4


Enabling Ports/Pins with Operands:
P6->DIR |= 0b10000000; /* Enables P6.7 without affecting other pins */
P6->DIR ^= 0b10000000; /* Toggles P6.7 without affecting other pins */
P6->DIR &= 0b10000000; /* Keeps P6.7 status while setting all other pins to off */

&= with 1 OR |= with 0 keeps status of other pins


Serial Communication:
UART: Universal Asynchronous Rx Tx



GPIO Functions (driverlib/gpio.h)
void GPIO_clearInterruptFlag (uint_fast8_t selectedPort, uint_fast16_t selectedPins)
void GPIO_disableInterrupt (uint_fast8_t selectedPort, uint_fast16_t selectedPins)
void GPIO_enableInterrupt (uint_fast8_t selectedPort, uint_fast16_t selectedPins)
uint_fast16_t GPIO_getEnabledInterruptStatus (uint_fast8_t selectedPort)
uint8_t GPIO_getInputPinValue (uint_fast8_t selectedPort, uint_fast16_t selectedPins)
uint_fast16_t GPIO_getInterruptStatus (uint_fast8_t selectedPort, uint_fast16_t selectedPins)
void GPIO_interruptEdgeSelect (uint_fast8_t selectedPort, uint_fast16_t selectedPins,
uint_fast8_t edgeSelect)
void GPIO_registerInterrupt (uint_fast8_t selectedPort, void(∗intHandler)(void))
void GPIO_setAsInputPin (uint_fast8_t selectedPort, uint_fast16_t selectedPins)
void GPIO_setAsInputPinWithPullDownResistor (uint_fast8_t selectedPort, uint_fast16_t
selectedPins)
void GPIO_setAsInputPinWithPullUpResistor (uint_fast8_t selectedPort, uint_fast16_t
selectedPins)
void GPIO_setAsOutputPin (uint_fast8_t selectedPort, uint_fast16_t selectedPins)
void GPIO_setAsPeripheralModuleFunctionInputPin (uint_fast8_t selectedPort, uint_fast16_t
selectedPins, uint_fast8_t mode)
void GPIO_setAsPeripheralModuleFunctionOutputPin (uint_fast8_t selectedPort,
uint_fast16_t selectedPins, uint_fast8_t mode)
void GPIO_setDriveStrengthHigh (uint_fast8_t selectedPort, uint_fast8_t selectedPins)
void GPIO_setDriveStrengthLow (uint_fast8_t selectedPort, uint_fast8_t selectedPins)
void GPIO_setOutputHighOnPin (uint_fast8_t selectedPort, uint_fast16_t selectedPins)
void GPIO_setOutputLowOnPin (uint_fast8_t selectedPort, uint_fast16_t selectedPins)
void GPIO_toggleOutputOnPin (uint_fast8_t selectedPort, uint_fast16_t selectedPins)
void GPIO_unregisterInterrupt (uint_fast8_t selectedPort)





I2C Config (driverlib/i2c.h)
struct _eUSCI_I2C_MasterConfig
void I2C_clearInterruptFlag (uint32_t moduleInstance, uint_fast16_t mask)
void I2C_disableInterrupt (uint32_t moduleInstance, uint_fast16_t mask)
void I2C_disableModule (uint32_t moduleInstance)
void I2C_disableMultiMasterMode (uint32_t moduleInstance)
void I2C_enableInterrupt (uint32_t moduleInstance, uint_fast16_t mask)
void I2C_enableModule (uint32_t moduleInstance)
void I2C_enableMultiMasterMode (uint32_t moduleInstance)
uint_fast16_t I2C_getEnabledInterruptStatus (uint32_t moduleInstance)
uint_fast16_t I2C_getInterruptStatus (uint32_t moduleInstance, uint16_t mask)
uint_fast8_t I2C_getMode (uint32_t moduleInstance)
uint32_t I2C_getReceiveBufferAddressForDMA (uint32_t moduleInstance)
uint32_t I2C_getTransmitBufferAddressForDMA (uint32_t moduleInstance)
void I2C_initMaster (uint32_t moduleInstance, const eUSCI_I2C_MasterConfig ∗config)
void I2C_initSlave (uint32_t moduleInstance, uint_fast16_t slaveAddress, uint_fast8_t slaveAddressOffset, uint32_t slaveOwnAddressEnable)
uint8_t I2C_isBusBusy (uint32_t moduleInstance)
bool I2C_masterIsStartSent (uint32_t moduleInstance)
uint8_t I2C_masterIsStopSent (uint32_t moduleInstance)
uint8_t I2C_masterReceiveMultiByteFinish (uint32_t moduleInstance)
bool I2C_masterReceiveMultiByteFinishWithTimeout (uint32_t moduleInstance, uint8_t ∗txData, uint32_t timeout)
uint8_t I2C_masterReceiveMultiByteNext (uint32_t moduleInstance)
void I2C_masterReceiveMultiByteStop (uint32_t moduleInstance)
uint8_t I2C_masterReceiveSingle (uint32_t moduleInstance)
uint8_t I2C_masterReceiveSingleByte (uint32_t moduleInstance)
void I2C_masterReceiveStart (uint32_t moduleInstance)
void I2C_masterSendMultiByteFinish (uint32_t moduleInstance, uint8_t txData)
bool I2C_masterSendMultiByteFinishWithTimeout (uint32_t moduleInstance, uint8_t txData, uint32_t timeout)
void I2C_masterSendMultiByteNext (uint32_t moduleInstance, uint8_t txData)
bool I2C_masterSendMultiByteNextWithTimeout (uint32_t moduleInstance, uint8_t txData, uint32_t timeout)
void I2C_masterSendMultiByteStart (uint32_t moduleInstance, uint8_t txData)
bool I2C_masterSendMultiByteStartWithTimeout (uint32_t moduleInstance, uint8_t txData, uint32_t timeout)
void I2C_masterSendMultiByteStop (uint32_t moduleInstance)
bool I2C_masterSendMultiByteStopWithTimeout (uint32_t moduleInstance, uint32_t timeout)
void I2C_masterSendSingleByte (uint32_t moduleInstance, uint8_t txData)
bool I2C_masterSendSingleByteWithTimeout (uint32_t moduleInstance, uint8_t txData, uint32_t timeout)
void I2C_masterSendStart (uint32_t moduleInstance)
void I2C_registerInterrupt (uint32_t moduleInstance, void(∗intHandler)(void))
void I2C_setMode (uint32_t moduleInstance, uint_fast8_t mode)
void I2C_setSlaveAddress (uint32_t moduleInstance, uint_fast16_t slaveAddress)
uint8_t I2C_slaveGetData (uint32_t moduleInstance)
void I2C_slavePutData (uint32_t moduleInstance, uint8_t transmitData)
void I2C_unregisterInterrupt (uint32_t moduleInstance)



Interrupt Functions (driverlib/interrupt.h)
void Interrupt_disableInterrupt (uint32_t interruptNumber)
bool Interrupt_disableMaster (void)
void Interrupt_disableSleepOnIsrExit (void)
void Interrupt_enableInterrupt (uint32_t interruptNumber)
bool Interrupt_enableMaster (void)
void Interrupt_enableSleepOnIsrExit (void)
uint8_t Interrupt_getPriority (uint32_t interruptNumber)
uint32_t Interrupt_getPriorityGrouping (void)
uint8_t Interrupt_getPriorityMask (void)
uint32_t Interrupt_getVectorTableAddress (void)
bool Interrupt_isEnabled (uint32_t interruptNumber)
void Interrupt_pendInterrupt (uint32_t interruptNumber)
void Interrupt_registerInterrupt (uint32_t interruptNumber, void(∗intHandler)(void))
void Interrupt_setPriority (uint32_t interruptNumber, uint8_t priority)
void Interrupt_setPriorityGrouping (uint32_t bits)
void Interrupt_setPriorityMask (uint8_t priorityMask)
void Interrupt_setVectorTableAddress (uint32_t addr)
void Interrupt_unpendInterrupt (uint32_t interruptNumber)
void Interrupt_unregisterInterrupt (uint32_t interruptNumber)
