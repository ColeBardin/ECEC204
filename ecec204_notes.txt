ECEC204 Notes Document
Cole Bardin
June 27th, 2022


Each Port Px where x is an integer, is a struct containing 5 uint8_t:

struct *Px {
	uint8_t DIR; /* Direction index of bits-> 1 for outputs for Px.index */
	uint8_t OUT; /* If dir is OUT, then it produces output */
	uint8_t IN;  /* If dir is IN, then there is an input number */
	uint8_t REN; /* Pull up/down, 1 for index makes Px.index active high, 0 for low */
	uint8_t SEL; /* */
};

PINS: Px.y where x.y is a float. x being the port and y being the index
Two build in LEDS:
LED1 -> red (P1.0)
LED2 -> r|g|b (P2.0 red, P2.1 green, P2.2 blue)

Switches:
S1 P1.1
S2 P1.4


Enabling Ports/Pins with Operands:
P6->DIR |= 0b10000000; /* Enables P6.7 without affecting other pins */
P6->DIR ^= 0b10000000; /* Toggles P6.7 without affecting other pins */
P6->DIR &= 0b10000000; /* Keeps P6.7 status while setting all other pins to off */

&= with 1 OR |= with 0 keeps status of other pins


Serial Communication:
UART: Universal Asynchronous Rx Tx



GPIO Functions (driverlib/gpio.h)
void GPIO_clearInterruptFlag (uint_fast8_t selectedPort, uint_fast16_t selectedPins)
void GPIO_disableInterrupt (uint_fast8_t selectedPort, uint_fast16_t selectedPins)
void GPIO_enableInterrupt (uint_fast8_t selectedPort, uint_fast16_t selectedPins)
uint_fast16_t GPIO_getEnabledInterruptStatus (uint_fast8_t selectedPort)
uint8_t GPIO_getInputPinValue (uint_fast8_t selectedPort, uint_fast16_t selectedPins)
uint_fast16_t GPIO_getInterruptStatus (uint_fast8_t selectedPort, uint_fast16_t selectedPins)
void GPIO_interruptEdgeSelect (uint_fast8_t selectedPort, uint_fast16_t selectedPins,
uint_fast8_t edgeSelect)
void GPIO_registerInterrupt (uint_fast8_t selectedPort, void(∗intHandler)(void))
void GPIO_setAsInputPin (uint_fast8_t selectedPort, uint_fast16_t selectedPins)
void GPIO_setAsInputPinWithPullDownResistor (uint_fast8_t selectedPort, uint_fast16_t
selectedPins)
void GPIO_setAsInputPinWithPullUpResistor (uint_fast8_t selectedPort, uint_fast16_t
selectedPins)
void GPIO_setAsOutputPin (uint_fast8_t selectedPort, uint_fast16_t selectedPins)
void GPIO_setAsPeripheralModuleFunctionInputPin (uint_fast8_t selectedPort, uint_fast16_t
selectedPins, uint_fast8_t mode)
void GPIO_setAsPeripheralModuleFunctionOutputPin (uint_fast8_t selectedPort,
uint_fast16_t selectedPins, uint_fast8_t mode)
void GPIO_setDriveStrengthHigh (uint_fast8_t selectedPort, uint_fast8_t selectedPins)
void GPIO_setDriveStrengthLow (uint_fast8_t selectedPort, uint_fast8_t selectedPins)
void GPIO_setOutputHighOnPin (uint_fast8_t selectedPort, uint_fast16_t selectedPins)
void GPIO_setOutputLowOnPin (uint_fast8_t selectedPort, uint_fast16_t selectedPins)
void GPIO_toggleOutputOnPin (uint_fast8_t selectedPort, uint_fast16_t selectedPins)
void GPIO_unregisterInterrupt (uint_fast8_t selectedPort)





I2C Config (driverlib/i2c.h)
struct _eUSCI_I2C_MasterConfig
void I2C_clearInterruptFlag (uint32_t moduleInstance, uint_fast16_t mask)
void I2C_disableInterrupt (uint32_t moduleInstance, uint_fast16_t mask)
void I2C_disableModule (uint32_t moduleInstance)
void I2C_disableMultiMasterMode (uint32_t moduleInstance)
void I2C_enableInterrupt (uint32_t moduleInstance, uint_fast16_t mask)
void I2C_enableModule (uint32_t moduleInstance)
void I2C_enableMultiMasterMode (uint32_t moduleInstance)
uint_fast16_t I2C_getEnabledInterruptStatus (uint32_t moduleInstance)
uint_fast16_t I2C_getInterruptStatus (uint32_t moduleInstance, uint16_t mask)
uint_fast8_t I2C_getMode (uint32_t moduleInstance)
uint32_t I2C_getReceiveBufferAddressForDMA (uint32_t moduleInstance)
uint32_t I2C_getTransmitBufferAddressForDMA (uint32_t moduleInstance)
void I2C_initMaster (uint32_t moduleInstance, const eUSCI_I2C_MasterConfig ∗config)
void I2C_initSlave (uint32_t moduleInstance, uint_fast16_t slaveAddress, uint_fast8_t slaveAddressOffset, uint32_t slaveOwnAddressEnable)
uint8_t I2C_isBusBusy (uint32_t moduleInstance)
bool I2C_masterIsStartSent (uint32_t moduleInstance)
uint8_t I2C_masterIsStopSent (uint32_t moduleInstance)
uint8_t I2C_masterReceiveMultiByteFinish (uint32_t moduleInstance)
bool I2C_masterReceiveMultiByteFinishWithTimeout (uint32_t moduleInstance, uint8_t ∗txData, uint32_t timeout)
uint8_t I2C_masterReceiveMultiByteNext (uint32_t moduleInstance)
void I2C_masterReceiveMultiByteStop (uint32_t moduleInstance)
uint8_t I2C_masterReceiveSingle (uint32_t moduleInstance)
uint8_t I2C_masterReceiveSingleByte (uint32_t moduleInstance)
void I2C_masterReceiveStart (uint32_t moduleInstance)
void I2C_masterSendMultiByteFinish (uint32_t moduleInstance, uint8_t txData)
bool I2C_masterSendMultiByteFinishWithTimeout (uint32_t moduleInstance, uint8_t txData, uint32_t timeout)
void I2C_masterSendMultiByteNext (uint32_t moduleInstance, uint8_t txData)
bool I2C_masterSendMultiByteNextWithTimeout (uint32_t moduleInstance, uint8_t txData, uint32_t timeout)
void I2C_masterSendMultiByteStart (uint32_t moduleInstance, uint8_t txData)
bool I2C_masterSendMultiByteStartWithTimeout (uint32_t moduleInstance, uint8_t txData, uint32_t timeout)
void I2C_masterSendMultiByteStop (uint32_t moduleInstance)
bool I2C_masterSendMultiByteStopWithTimeout (uint32_t moduleInstance, uint32_t timeout)
void I2C_masterSendSingleByte (uint32_t moduleInstance, uint8_t txData)
bool I2C_masterSendSingleByteWithTimeout (uint32_t moduleInstance, uint8_t txData, uint32_t timeout)
void I2C_masterSendStart (uint32_t moduleInstance)
void I2C_registerInterrupt (uint32_t moduleInstance, void(∗intHandler)(void))
void I2C_setMode (uint32_t moduleInstance, uint_fast8_t mode)
void I2C_setSlaveAddress (uint32_t moduleInstance, uint_fast16_t slaveAddress)
uint8_t I2C_slaveGetData (uint32_t moduleInstance)
void I2C_slavePutData (uint32_t moduleInstance, uint8_t transmitData)
void I2C_unregisterInterrupt (uint32_t moduleInstance)



Interrupt Functions (driverlib/interrupt.h)
void Interrupt_disableInterrupt (uint32_t interruptNumber)
bool Interrupt_disableMaster (void)
void Interrupt_disableSleepOnIsrExit (void)
void Interrupt_enableInterrupt (uint32_t interruptNumber)
bool Interrupt_enableMaster (void)
void Interrupt_enableSleepOnIsrExit (void)
uint8_t Interrupt_getPriority (uint32_t interruptNumber)
uint32_t Interrupt_getPriorityGrouping (void)
uint8_t Interrupt_getPriorityMask (void)
uint32_t Interrupt_getVectorTableAddress (void)
bool Interrupt_isEnabled (uint32_t interruptNumber)
void Interrupt_pendInterrupt (uint32_t interruptNumber)
void Interrupt_registerInterrupt (uint32_t interruptNumber, void(∗intHandler)(void))
void Interrupt_setPriority (uint32_t interruptNumber, uint8_t priority)
void Interrupt_setPriorityGrouping (uint32_t bits)
void Interrupt_setPriorityMask (uint8_t priorityMask)
void Interrupt_setVectorTableAddress (uint32_t addr)
void Interrupt_unpendInterrupt (uint32_t interruptNumber)
void Interrupt_unregisterInterrupt (uint32_t interruptNumber)





Counters and Timers:

Pusle width module
For counting in continuous mode there are 7 capture and compare registers (CCR0-CCR6)
CCR0 Is the max value for periodic mode
CCRs can be matched to an interrupt

Set Reset Method:
first CCR sets the value 
CCR0 resets the value

timer A up mode config:
registers int for when timer is 0 or at max
give max value

timer A compare mode config:
regisers int for when timer in arbitrary value
give intermediate interrupt value
set_reset or reset_set to determine mode


setup to do in main:
see PWD BY COMPARE ON ANY PIN ccs project

int handlers are:
TA0_0_IRQHandler(void) /* interrupt when timer is at top */
TA0_N_IRQHandler(void) /* default for timer any other value
						 defaults to bottom but will also exe if capture mode is configured */

TA0_N int can be displayed for be disabled for when timer is at bottom in timer a up mode config


Compare on TA0.1
difference is interrupts are not written explicitely
in timer A capture mode config: capture compare int disabled
in timer A upmode config: TA0_0 and TA0_N are disabpled
in main: enable specific pin for compare pin




RTOS:
have tasks: {t1 t2 t3 ... tn}
for some task ti
period: pi
deadline: di or Pi
Worst Case Execution Time (WCET): ci

-preemtive
-independent

Generate a schedule in which every task meets its deadline
	needs a scheduling policy
	Rate Monotonic (rate = 1/pi)

Selects tasks of highest priority
Shorter Period/Higher Rate = HIGHER PRIORITY
Longer Period/Lower Rate = LOWER PRIORITY


Utilization test
t1: c1=20ms; p1=100ms H
t2: c2=40ms; p2=150ms M
t3: c3=100ms; p3=350ms L

Utilization (ci/pi):
U1: 20/100=0.2
U2: 40/150=0.276
U3: 100/350=0.286

Trivial Test: 
U1+U2+U3 <= 1

Utilization test
U1+U2+...+Un <= n*(2^(1/n)-1)
U1+U2+U3 <= 3(2^(1/3) -1)
0.753 <= 0.779

as n->infinity n(2^(1/n)-1) = ln2 = 0.6993
Sufficient, not necessary

Given tasks, applying utilization test
If passes, good
If fails, then use EXACT SCHEDULABILITY TEST
	If passes, good
	If fails, Not schedulable


Other Scheduling Algorithm:
Earliest Deadline First (EDF)
Pros: can sometimes schedule a set of tasks that Rate Monotonic cannot
Cons: Overhead. Processessing needed to sort tasks by deadlines



Programming
RTOS Services:
TI-RTOS (Free_RTOS is better for general use)
Bare Metal Programming:
Application
Driverlib
MSP432

Architecture:
Application (multi-threaded/task)
TI_RTOS
Driverlib
MSP432

App, RTOS and Driverlib are linked to an executable
n threds for each task
Use a threading library (PThreads)

PThreads
Posix-Threads
Thread creation
Inter-thread communication
Thread synchronization
Scheduling
Memory management

TI_RTOS handles all except Thread Creation

What is a Thread?
Software construct which executes a function

TI_RTOS has multiple types of threads:
HWI (Hardware interrupts)
SWI (Software interrupts)
Tasks (User created)
Idle

A thread contains:
thread ID
function
parameter (only 1, use structs for multiple arguments)
priority (8bit, higher num = higher priority)
stack in memory
state (registers and vals, program counter. for when other thread needs to be run)

Life cycle:
RTOS has ready que
scheduler places thread on ready que
looks at READY que and decides which thread to run (dispatch)
state of thread is RUNNING
	multiple things can happen now:
	can return thread from READY to Ready (Preemted)
	can finish running and exit (TERMINATED)
	can also be BLOCKED (I/O request or MSG from other thread)
		Once requests are satisfied, returns to READY (or can be deleted and TERMINATED)


thread is DETACHED: no returning value (blinking LED)
JOINABLE: thread returns value to main

Code:
void delay(void *d){
	int time = (int)d;
	...
}
main() {
	...
	int delay=1;
	status = pthread_create(&tid, &attrs, mainThread, (void *)delay) -> Places in READY
	// typecast argument to void* and in func accept void* and then typecast back to needed data type
	...
	start scheduler
	// NOT REACHABLE! infinite loop^
}


MultiThread Programming:
V1:
main(){
	...
	pthread_create(...) //Blinky
	...
	pthread_create(...) //UART
	// Blinky and UART in READY in DETACHED MODE
	...
	start scheduler
}

V2:
contractor(){
	// Custom TID
	// FORK POINT
	for (i=0;i<N;i++)
		pthread_create(...) // Worker() and TID which is index value
	...
	// JOIN POINT
	for(N)
		pthread_join(OSTID)
	...
}
worker(tid){
	...
}
main(){
	...
	// Contractor
	pthread_create(...) // Contractor
	...
	start scheduler
}

SIMD Programming:
single instruction multiple data
every thread executing same sequence of instructions on different data

k threads dividing a long array into k chunks and each individually calculating the sum

Efficient on single core?
No, if it is only compute intensive
Yes, if it is compute intensive and contains I/O 


Thread Communication:
Use message que (data structure within kernel space)
FIFO, bounder/circular
send() and recv() with message decriptor MQ

Behavior
send()
1) if MQ has space, place message in que and return (NON BLOCKNG)
2) if MQ is full, BLOCK until there is space

recv()
1) if MQ is empty, BLOCK
2) else return message from MQ

multiple threads sending messages to que and multiple recievers reading messages from que
OS guarantees that MQ is "thread safe"
if two are tring to WRITE at same time to same loc, OS will BLOCK one
